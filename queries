/* minions - edges, partners - documents */

/*
	go - group volume
	lo - personal volume
*/

/* case 1 - linked list without compression */

/* fill partners with random lo and go=1000 with 100k writes - 1.680s */
FOR i IN 1..100000
    LET l = FLOOR(RAND() * 1000)
    INSERT {
      _key: CONCAT("user", i),
      lo: l,
      go: 1000
    } IN partners


/* fill minions linked list (edges) with 100k-1 writes - 3.133s */
FOR i IN 1..99999
  INSERT {
    _from: CONCAT("partners/user", i),
    _to: CONCAT("partners/user", i+1),
    vertex: CONCAT("user", i)
  } INTO minions
  

/* 
	1.1 
	get graph with 100k vertices by user id 
	user1 -> user2 -> ... -> user100000
	lo - random from 1 to 1000
	go - 1000
*/

/* 
	execution speed: +inf (disconnect) 
*/
FOR v,e,p IN 1..100000 OUTBOUND 'partners/user1' GRAPH 'minions'
    RETURN p

/*  
	execution speed: +inf  
*/
FOR v,e,p IN 1..10000 OUTBOUND 'partners/user1' GRAPH 'minions'
    RETURN p

/* 
	execution speed:  
	8.42618s - first time
	6.28349s - second time
	4.61313s - third time and next 
*/
FOR v,e,p IN 1..1000 OUTBOUND 'partners/user1' GRAPH 'minions'
    RETURN p

/* 
	execution speed:  
	5.23348s - first time
	4.90768s - second time and next
*/
FOR v,e,p IN 1..1000 OUTBOUND 'partners/user99000' GRAPH 'minions'
    RETURN p


/* case 2 - binary tree */

/* fill bt with 100 nodes */
FOR i IN 1..50
  INSERT {
    _from: CONCAT("partners/user", i),
    _to: CONCAT("partners/user", i*2),
    vertex: CONCAT("user", i)
  } INTO minions  
FOR i IN 1..50
  INSERT {
    _from: CONCAT("partners/user", i),
    _to: CONCAT("partners/user", i*2 + 1),
    vertex: CONCAT("user", i)
  } INTO minions


/* increase go for all upstream partners after adding user100 lo=100 */
LET user = 'user100'
LET addedLo = 100

FOR v IN 0..100 INBOUND CONCAT('partners/', user) GRAPH 'minions'
    LET l = v._key == user ? addedLo : 0
    UPDATE v WITH { lo: v.lo + l, go: v.go + addedLo } IN partners

/* 
	count of users - 100k
	without compression 
*/
/* 
	max btree depth per 100k users: 2^16 - 31072  vertices
	execution speed: 5.93024s		
*/
for v,e,p IN 16..16 OUTBOUND 'partners_test/user1' GRAPH 'minions_test'
    RETURN p

/* 
	2^13 + 2^14 + 2^15 + 2^16 - 31072 vertices
	execution speed: 16.65557s		
*/
for v,e,p IN 13..16 OUTBOUND 'partners_test/user1' GRAPH 'minions_test'
    RETURN p

/* 
	2^10 + 2^11 + 2^12 + 2^13 vertices
	execution speed: 2.14368s		
*/
for v,e,p IN 10..13 OUTBOUND 'partners_test/user1' GRAPH 'minions_test'
    RETURN p

/* 
	2^7+ 2^8 + 2^9 + 2^10 vertices
	execution speed: 0.23279s		
*/
for v,e,p IN 7..10 OUTBOUND 'partners_test/user1' GRAPH 'minions_test'
    RETURN p
